# terraform/main.tf
terraform {
  required_version = ">= 1.0"
    
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.23"
    }
    null = {
      source = "hashicorp/null"
      version = "~> 3.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.0"
    }
  }

  backend "s3" {
    # Using the final confirmed bucket name from previous successful steps
    bucket         = "innovartmart-tfstate-f055f0bc-3585-4" 
    key            = "eks/innovatemart-prod.tfstate"
    region         = "us-east-1"
    dynamodb_table = "innovartmart-tf-locks"
    encrypt        = true
  }
}

# ----------------------------------------------------
# Providers
# ----------------------------------------------------

provider "aws" {
  region = var.aws_region
}

provider "kubernetes" {
  host                   = module.eks.cluster_endpoint
  cluster_ca_certificate = base64decode(module.eks.cluster_certificate_authority_data)
  
  exec {
    api_version = "client.authentication.k8s.io/v1beta1"
    command     = "aws"
    args = [
      "eks",
      "get-token",
      "--cluster-name",
      module.eks.cluster_name
    ]
  }
}

# ----------------------------------------------------
# Data Source
# ----------------------------------------------------

data "aws_availability_zones" "available" {
  state = "available"
}

# ----------------------------------------------------
# Module Calls and Dependency Fix
# ----------------------------------------------------

# VPC Module
module "vpc" {
  source       = "./vpc"
  vpc_cidr     = var.vpc_cidr
  cluster_name = var.cluster_name
}

# EKS Module
module "eks" {
  source             = "./eks"
  cluster_name       = var.cluster_name
  private_subnet_ids = module.vpc.private_subnet_ids
  public_subnet_ids  = module.vpc.public_subnet_ids
  depends_on         = [module.vpc]
}

# CRITICAL FIX: NULL RESOURCE to manage the dependency chain (EKS -> IAM/K8s)
resource "null_resource" "wait_for_eks_ready" {
  triggers = {
    cluster_name = module.eks.cluster_name
  }
  depends_on = [
    module.eks
  ]
}

# IAM Module (Developer User and K8s RBAC)
module "iam" {
  source       = "./iam"
  cluster_name = var.cluster_name
  depends_on   = [
    null_resource.wait_for_eks_ready 
  ] 
}

# BONUS 1: RDS Module
module "rds" {
  source             = "./rds"
  cluster_name       = var.cluster_name
  vpc_id             = module.vpc.vpc_id
  vpc_cidr           = var.vpc_cidr
  private_subnet_ids = module.vpc.private_subnet_ids
  # Using cluster SG as fallback for EKS node access
  eks_node_sg_id     = module.eks.cluster_security_group_id 
  depends_on         = [module.eks]
}
